{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///./node_modules/react-hook-form/dist/react-hook-form.es.js","webpack:///./src/pages/Assform.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./node_modules/core-js/modules/_object-to-array.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/es7.object.values.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"names":["$export","$entries","S","entries","it","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","msg","useState","submitted","setSubmitted","useForm","register","handleSubmit","setError","errors","reset","isSubmitting","formState","onSubmit","data","a","fetch","method","mode","cache","body","JSON","stringify","headers","message","showThankYou","className","type","onClick","showForm","htmlFor","id","placeholder","ref","required","disabled","email","rows","question","submit","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError","toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","DESCRIPTORS","getKeys","toIObject","isEnum","f","isEntries","key","keys","i","result","push","_arrayLikeToArray","len","arr2","P","fill","$values","values","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","makeInvokeMethod","fn","obj","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","_defineProperty","defineProperty","enumerable","configurable","writable"],"mappings":"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","file":"component---src-pages-assform-jsx-f33348e9fb50715d9fad.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.date.now\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.array.index-of\";\nimport _regeneratorRuntime from \"/home/za/Desktop/cockpit-blog/node_modules/@babel/runtime/regenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/za/Desktop/cockpit-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport _toConsumableArray from \"/home/za/Desktop/cockpit-blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.filter\";\nimport _defineProperty from \"/home/za/Desktop/cockpit-blog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.object.assign\";\nimport _slicedToArray from \"/home/za/Desktop/cockpit-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.is-array\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n};\n\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar VALUE = 'value';\nvar UNDEFINED = 'undefined';\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar REGEX_IS_PLAIN_PROP = /^\\w*$/;\nvar REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\nvar REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners(_ref) {\n  var ref = _ref.field.ref,\n      handleChange = _ref.handleChange,\n      isRadioOrCheckbox = _ref.isRadioOrCheckbox;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = function isKey(value) {\n  return !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n};\n\nvar stringToPath = function stringToPath(string) {\n  var result = [];\n  string.replace(REGEX_PROP_NAME, function (match, number, quote, string) {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!isKey(key)) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = path.split(/[,[\\].]+?/).filter(Boolean).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusOnErrorField = function focusOnErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  var index = -1;\n  var length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var childObject = parent(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var result = !(childObject != null) || delete childObject[key];\n  var previousObjRef = undefined;\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(function (data) {\n          return isObject(data) && !isEmptyObject(data);\n        }).length) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(function (path) {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nvar isSameRef = function isSameRef(fieldValue, ref) {\n  return fieldValue && fieldValue.ref === ref;\n};\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  var ref = field.ref,\n      _field$ref = field.ref,\n      name = _field$ref.name,\n      type = _field$ref.type,\n      mutationWatcher = field.mutationWatcher;\n  var fieldValue = fields[name];\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    var options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach(function (option, index) {\n        var ref = option.ref,\n            mutationWatcher = option.mutationWatcher;\n\n        if (ref && isDetached(ref) && isSameRef(option, ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [\"[\".concat(index, \"]\")]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldValue, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.reduce(function (previous, _ref4) {\n    var _ref4$ref = _ref4.ref,\n        checked = _ref4$ref.checked,\n        value = _ref4$ref.value;\n    return checked ? {\n      isValid: true,\n      value: value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref5) {\n    var selected = _ref5.selected;\n    return selected;\n  }).map(function (_ref6) {\n    var value = _ref6.value;\n    return value;\n  });\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === 'select-multiple';\n};\n\nvar isEmptyString = function isEmptyString(value) {\n  return value === '';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (_ref7) {\n        var checked = _ref7.ref.checked;\n        return checked;\n      }).map(function (_ref8) {\n        var value = _ref8.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  var name = ref.name,\n      value = ref.value;\n  var field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fields, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) ? search.find(function (data) {\n      return name.startsWith(data);\n    }) : search && search.nest)) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  };\n\n  for (var name in fields) {\n    _loop(name);\n  }\n\n  return output;\n};\n\nvar compareObject = function compareObject() {\n  var objectA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var objectB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var objectAKeys = Object.keys(objectA);\n  var objectBKeys = Object.keys(objectB);\n  return objectAKeys.length === objectBKeys.length && objectAKeys.every(function (key) {\n    return objectB[key] && objectB[key] === objectA[key];\n  });\n};\n\nvar isSameError = function isSameError(error, _ref9) {\n  var type = _ref9.type,\n      types = _ref9.types,\n      message = _ref9.message;\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldRenderBasedOnError(_ref10) {\n  var errors = _ref10.errors,\n      name = _ref10.name,\n      error = _ref10.error,\n      validFields = _ref10.validFields,\n      fieldsWithValidation = _ref10.fieldsWithValidation;\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = get(error, name);\n  var existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  var isValueMessage = function isValueMessage(value) {\n    return isObject(value) && !isRegex(value);\n  };\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || isObject(value) && isValidElement(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (validateAllFieldCriteria) {\n    var error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n    });\n  }\n\n  return {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref11) {\n    var ref, _ref11$ref, type, value, name, options, required, maxLength, minLength, min, max, pattern, validate, _a, fields, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref13, requiredValue, requiredMessage, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validationResult, _i, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref11.ref, _ref11$ref = _ref11.ref, type = _ref11$ref.type, value = _ref11$ref.value, name = _ref11$ref.name, options = _ref11.options, required = _ref11.required, maxLength = _ref11.maxLength, minLength = _ref11.minLength, min = _ref11.min, max = _ref11.max, pattern = _ref11.pattern, validate = _ref11.validate;\n            fields = fieldsRef.current;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = isEmptyString(value);\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n              if (!validateAllFieldCriteria) {\n                return error;\n              }\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 15;\n              break;\n            }\n\n            _ref13 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), requiredValue = _ref13.value, requiredMessage = _ref13.message;\n\n            if (!requiredValue) {\n              _context.next = 15;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: requiredMessage,\n              ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 15:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context.next = 23;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 23;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 23:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 33;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n            _exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 33;\n              break;\n            }\n\n            getMinMaxMessage(!!_exceedMax, maxLengthMessage, minLengthMessage);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 33;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 33:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 39;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 39;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 39;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 39:\n            if (!validate) {\n              _context.next = 72;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 53;\n              break;\n            }\n\n            _context.next = 45;\n            return validate(fieldValue);\n\n          case 45:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 51;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 51;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 51:\n            _context.next = 72;\n            break;\n\n          case 53:\n            if (!isObject(validate)) {\n              _context.next = 72;\n              break;\n            }\n\n            validationResult = {};\n            _i = 0, _Object$entries = Object.entries(validate);\n\n          case 56:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 68;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 60;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 68);\n\n          case 60:\n            _context.next = 62;\n            return validateFunction(fieldValue);\n\n          case 62:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 65:\n            _i++;\n            _context.next = 56;\n            break;\n\n          case 68:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 72;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 72;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 72:\n            return _context.abrupt(\"return\", error);\n\n          case 73:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return isArray(error.inner) ? error.inner.reduce(function (previous, _ref14) {\n    var path = _ref14.path,\n        message = _ref14.message,\n        type = _ref14.type;\n    return Object.assign(Object.assign({}, previous), path ? previous[path] && validateAllFieldCriteria ? _defineProperty({}, path, appendErrors(path, validateAllFieldCriteria, previous, type, message)) : _defineProperty({}, path, previous[path] || Object.assign({\n      message: message,\n      type: type\n    }, validateAllFieldCriteria ? {\n      types: _defineProperty({}, type, message || true)\n    } : {})) : {});\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nfunction validateWithSchema(_x4, _x5, _x6, _x7, _x8) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!validationResolver) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", validationResolver(data, context));\n\n          case 2:\n            _context8.prev = 2;\n            _context8.next = 5;\n            return validationSchema.validate(data, {\n              abortEarly: false,\n              context: context\n            });\n\n          case 5:\n            _context8.t0 = _context8.sent;\n            _context8.t1 = {};\n            return _context8.abrupt(\"return\", {\n              values: _context8.t0,\n              errors: _context8.t1\n            });\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t2 = _context8[\"catch\"](2);\n            return _context8.abrupt(\"return\", {\n              values: {},\n              errors: transformToNestObject(parseErrorSchema(_context8.t2, validateAllFieldCriteria))\n            });\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[2, 10]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(value, key, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map(function (value, key) {\n    return getInnerPath(value, key);\n  }) : Object.entries(values).map(function (_ref18) {\n    var _ref19 = _slicedToArray(_ref18, 2),\n        key = _ref19[0],\n        value = _ref19[1];\n\n    return getInnerPath(value, key, true);\n  });\n};\n\nvar getPath$1 = function getPath$1(parentPath, value) {\n  return getPath(parentPath, value).flat(Infinity);\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, combinedDefaultValues) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? get(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = function skipValidation(_ref20) {\n  var isOnChange = _ref20.isOnChange,\n      hasError = _ref20.hasError,\n      isBlurEvent = _ref20.isBlurEvent,\n      isOnSubmit = _ref20.isOnSubmit,\n      isReValidateOnSubmit = _ref20.isReValidateOnSubmit,\n      isOnBlur = _ref20.isOnBlur,\n      isReValidateOnBlur = _ref20.isReValidateOnBlur,\n      isSubmitted = _ref20.isSubmitted;\n  return isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf('['));\n};\n\nvar getFieldValueByName = function getFieldValueByName(fields, name) {\n  var results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  var isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (var i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    var dataA = referenceArray[i];\n    var dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (var key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp(\"^\".concat(searchName, \"[\\\\d+]\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).reduce(function (prev, current) {\n    return isMatchFieldArrayName(name, current) ? true : prev;\n  }, false);\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nfunction useForm() {\n  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref21$mode = _ref21.mode,\n      mode = _ref21$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref21$mode,\n      _ref21$reValidateMode = _ref21.reValidateMode,\n      reValidateMode = _ref21$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref21$reValidateMode,\n      validationSchema = _ref21.validationSchema,\n      validationResolver = _ref21.validationResolver,\n      validationContext = _ref21.validationContext,\n      _ref21$defaultValues = _ref21.defaultValues,\n      defaultValues = _ref21$defaultValues === void 0 ? {} : _ref21$defaultValues,\n      _ref21$submitFocusErr = _ref21.submitFocusError,\n      submitFocusError = _ref21$submitFocusErr === void 0 ? true : _ref21$submitFocusErr,\n      validateCriteriaMode = _ref21.validateCriteriaMode;\n\n  var fieldsRef = useRef({});\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef({});\n  var fieldArrayDefaultValues = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultValuesRef = useRef(defaultValues);\n  var defaultValuesAtRenderRef = useRef({});\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChangeRef = useRef();\n  var resetFieldArrayFunctionRef = useRef({});\n  var validationContextRef = useRef(validationContext);\n  var fieldArrayNamesRef = useRef(new Set());\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit,\n      isOnChange = _useRef$current.isOnChange;\n  var validateAllFieldCriteria = validateCriteriaMode === 'all';\n  var isWindowUndefined = typeof window === UNDEFINED;\n  var shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\n  var isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  var isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  var readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current2.isOnBlur,\n      isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  validationContextRef.current = validationContext;\n  var reRender = useCallback(function () {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var shouldReRender = shouldRender || shouldRenderBasedOnError({\n      errors: errorsRef.current,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateSchemaOrResolver) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current[\"delete\"](name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateSchemaOrResolver]);\n  var setFieldValue = useCallback(function (field, rawValue) {\n    var ref = field.ref,\n        options = field.options;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(function (_ref22) {\n        var radioRef = _ref22.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref)) {\n      if (isString(value)) {\n        ref.value = value;\n      } else {\n        ref.files = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref23) {\n        var checkboxRef = _ref23.ref;\n        return checkboxRef.checked = value.includes(checkboxRef.value);\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, [isWeb]);\n\n  var setDirty = function setDirty(name) {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    var isFieldDirty = defaultValuesAtRenderRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    var previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n\n    if (isFieldArray) {\n      var fieldArrayName = getFieldArrayParentName(name);\n      isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    var isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isFieldDirty;\n\n    if (isFieldDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current[\"delete\"](name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isFieldDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  var setDirtyAndTouchedFields = useCallback(function (fieldName) {\n    if (setDirty(fieldName) || !get(touchedFieldsRef.current, fieldName) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, fieldName, true);\n    }\n  }, []);\n  var setInternalValues = useCallback(function (name, value, parentFieldName) {\n    var isValueArray = isArray(value);\n\n    for (var key in value) {\n      var fieldName = \"\".concat(parentFieldName || name).concat(isValueArray ? \"[\".concat(key, \"]\") : \".\".concat(key));\n      var field = fieldsRef.current[fieldName];\n\n      if (isObject(value[key])) {\n        setInternalValues(name, value[key], fieldName);\n      }\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirtyAndTouchedFields(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirtyAndTouchedFields]);\n  var setInternalValue = useCallback(function (name, value) {\n    var field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      var output = setDirtyAndTouchedFields(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value);\n    }\n  }, [setDirtyAndTouchedFields, setFieldValue, setInternalValues]);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var field, _error;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              field = fieldsRef.current[name];\n\n              if (!field) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 4:\n              _error = _context2.sent;\n              shouldRenderBaseOnError(name, _error, skipReRender ? null : false);\n              return _context2.abrupt(\"return\", isEmptyObject(_error));\n\n            case 7:\n              return _context2.abrupt(\"return\", false);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref24.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = useCallback( /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n      var _yield$validateWithSc, errors, previousFormIsValid, _error2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n\n            case 2:\n              _yield$validateWithSc = _context3.sent;\n              errors = _yield$validateWithSc.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (isArray(payload)) {\n                payload.forEach(function (name) {\n                  var error = get(errors, name);\n\n                  if (error) {\n                    set(errorsRef.current, name, error);\n                  } else {\n                    unset(errorsRef.current, [name]);\n                  }\n                });\n                reRender();\n              } else {\n                _error2 = get(errors, payload);\n                shouldRenderBaseOnError(payload, _error2 ? _defineProperty({}, payload, _error2) : {}, previousFormIsValid !== isValidRef.current);\n              }\n\n              return _context3.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x11) {\n      return _ref25.apply(this, arguments);\n    };\n  }(), [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  var triggerValidation = useCallback( /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current);\n\n              if (!shouldValidateSchemaOrResolver) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", executeSchemaOrResolverValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 6;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, true);\n\n                        case 2:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x13) {\n                  return _ref28.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context5.sent;\n              reRender();\n              return _context5.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context5.next = 11;\n              return executeValidation(fields);\n\n            case 11:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x12) {\n      return _ref27.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation, reRender, shouldValidateSchemaOrResolver]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    var shouldRender = false;\n    var isArrayValue = isArray(names);\n    (isArrayValue ? names : [names]).forEach(function (name) {\n      var isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isArrayValue ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isArrayValue) {\n      reRender();\n    }\n\n    if (shouldValidate || isArrayValue && valueOrShouldValidate) {\n      triggerValidation(isArrayValue ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref29) {\n      var type, target, name, fields, errors, field, currentError, error, isBlurEvent, shouldSkipValidation, shouldUpdateDirty, shouldRender, _yield$validateWithSc2, _errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref29.type, target = _ref29.target;\n              name = target ? target.name : '';\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              field = fields[name];\n              currentError = get(errors, name);\n\n              if (field) {\n                _context6.next = 8;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 8:\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation({\n                hasError: !!currentError,\n                isOnChange: isOnChange,\n                isBlurEvent: isBlurEvent,\n                isOnSubmit: isOnSubmit,\n                isReValidateOnSubmit: isReValidateOnSubmit,\n                isOnBlur: isOnBlur,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isSubmitted: isSubmittedRef.current\n              });\n              shouldUpdateDirty = setDirty(name);\n              shouldRender = isFieldWatched(name) || shouldUpdateDirty;\n\n              if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n                set(touchedFieldsRef.current, name, true);\n                shouldRender = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 15;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", shouldRender && reRender());\n\n            case 15:\n              if (!shouldValidateSchemaOrResolver) {\n                _context6.next = 26;\n                break;\n              }\n\n              _context6.next = 18;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n\n            case 18:\n              _yield$validateWithSc2 = _context6.sent;\n              _errors = _yield$validateWithSc2.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(_errors);\n              error = get(_errors, name) ? _defineProperty({}, name, get(_errors, name)) : {};\n\n              if (previousFormIsValid !== isValidRef.current) {\n                shouldRender = true;\n              }\n\n              _context6.next = 29;\n              break;\n\n            case 26:\n              _context6.next = 28;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 28:\n              error = _context6.sent;\n\n            case 29:\n              if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n                reRender();\n              }\n\n            case 30:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x14) {\n      return _ref30.apply(this, arguments);\n    };\n  }();\n  var validateSchemaOrResolver = useCallback(function () {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(function (_ref32) {\n      var errors = _ref32.errors;\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n  var removeFieldEventListener = useCallback(function (field, forceDelete) {\n    if (handleChangeRef.current && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  }, []);\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    var name = field.ref.name;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(function (data) {\n      return data.current[\"delete\"](name);\n    });\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateSchemaOrResolver) {\n        validateSchemaOrResolver();\n      }\n    }\n  }, [reRender, shouldValidateSchemaOrResolver, validateSchemaOrResolver, removeFieldEventListener]);\n\n  function clearError(name) {\n    if (name) {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  var setInternalError = function setInternalError(_ref33) {\n    var name = _ref33.name,\n        type = _ref33.type,\n        types = _ref33.types,\n        message = _ref33.message,\n        shouldRender = _ref33.shouldRender;\n    var field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type: type,\n      message: message,\n      types: types\n    })) {\n      set(errorsRef.current, name, {\n        type: type,\n        types: types,\n        message: message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (shouldRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var message = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (isString(name)) {\n      setInternalError(Object.assign(Object.assign({\n        name: name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type: type,\n        message: message\n      }), {\n        shouldRender: true\n      }));\n    } else if (isArray(name)) {\n      name.forEach(function (error) {\n        return setInternalError(Object.assign({}, error));\n      });\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    var watchFields = watchFieldsRef.current;\n    var combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    var result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (fieldsRef.current) {\n      (isArray(names) ? names : [names]).forEach(function (fieldName) {\n        return removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      });\n    }\n  }\n\n  function registerFieldsRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldRefAndValidationOptions = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var field = fields[name];\n    var isEmptyDefaultValue = true;\n    var isFieldArray;\n    var defaultValue;\n\n    if (isRadioOrCheckbox ? field && isArray(field.options) && field.options.filter(Boolean).find(function (option) {\n      return value === option.ref.value && option.ref === ref;\n    }) : field && ref === field.ref) {\n      fields[name] = Object.assign(Object.assign({}, field), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeFieldEventListenerAndRef(field);\n      });\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(field && field.options || []), [{\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), {\n        mutationWatcher: mutationWatcher\n      });\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = get(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (shouldValidateSchemaOrResolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaOrResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(function (error) {\n          var previousFormIsValid = isValidRef.current;\n          isEmptyObject(error) ? validFieldsRef.current.add(name) : isValidRef.current = false;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field: isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field,\n        isRadioOrCheckbox: isRadioOrCheckbox,\n        handleChange: handleChangeRef.current\n      });\n    }\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return function (ref) {\n      return ref && registerFieldsRef(ref, refOrValidationOptions);\n    };\n  }\n\n  var handleSubmit = useCallback(function (callback) {\n    return /*#__PURE__*/function () {\n      var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n        var fieldErrors, fields, fieldValues, _yield$validateWithSc3, errors, values, _i2, _Object$values, field, _name, fieldError;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fields = fieldsRef.current;\n                fieldValues = getFieldsValues(fields);\n\n                if (readFormStateRef.current.isSubmitting) {\n                  isSubmittingRef.current = true;\n                  reRender();\n                }\n\n                _context7.prev = 5;\n\n                if (!shouldValidateSchemaOrResolver) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                _context7.next = 9;\n                return validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n\n              case 9:\n                _yield$validateWithSc3 = _context7.sent;\n                errors = _yield$validateWithSc3.errors;\n                values = _yield$validateWithSc3.values;\n                errorsRef.current = errors;\n                fieldErrors = errors;\n                fieldValues = values;\n                _context7.next = 29;\n                break;\n\n              case 17:\n                _i2 = 0, _Object$values = Object.values(fields);\n\n              case 18:\n                if (!(_i2 < _Object$values.length)) {\n                  _context7.next = 29;\n                  break;\n                }\n\n                field = _Object$values[_i2];\n\n                if (!field) {\n                  _context7.next = 26;\n                  break;\n                }\n\n                _name = field.ref.name;\n                _context7.next = 24;\n                return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n              case 24:\n                fieldError = _context7.sent;\n\n                if (fieldError[_name]) {\n                  set(fieldErrors, _name, fieldError[_name]);\n                  validFieldsRef.current[\"delete\"](_name);\n                } else {\n                  if (fieldsWithValidationRef.current.has(_name)) {\n                    validFieldsRef.current.add(_name);\n                  }\n                }\n\n              case 26:\n                _i2++;\n                _context7.next = 18;\n                break;\n\n              case 29:\n                if (!isEmptyObject(fieldErrors)) {\n                  _context7.next = 35;\n                  break;\n                }\n\n                errorsRef.current = {};\n                _context7.next = 33;\n                return callback(transformToNestObject(fieldValues), e);\n\n              case 33:\n                _context7.next = 37;\n                break;\n\n              case 35:\n                errorsRef.current = fieldErrors;\n\n                if (submitFocusError && isWeb) {\n                  focusOnErrorField(fields, fieldErrors);\n                }\n\n              case 37:\n                _context7.prev = 37;\n                isSubmittedRef.current = true;\n                isSubmittingRef.current = false;\n                submitCountRef.current = submitCountRef.current + 1;\n                reRender();\n                return _context7.finish(37);\n\n              case 43:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[5,, 37, 43]]);\n      }));\n\n      return function (_x15) {\n        return _ref34.apply(this, arguments);\n      };\n    }();\n  }, [isWeb, reRender, shouldValidateSchemaOrResolver, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  var resetRefs = function resetRefs(_ref35) {\n    var errors = _ref35.errors,\n        dirty = _ref35.dirty,\n        isSubmitted = _ref35.isSubmitted,\n        touched = _ref35.touched,\n        isValid = _ref35.isValid,\n        submitCount = _ref35.submitCount,\n        dirtyFields = _ref35.dirtyFields;\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = new Set();\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i3 = 0, _Object$values2 = Object.values(fieldsRef.current); _i3 < _Object$values2.length; _i3++) {\n        var field = _Object$values2[_i3];\n\n        if (field) {\n          var _ref36 = field.ref,\n              options = field.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref36) && isArray(options) ? options[0].ref : _ref36;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return fieldsRef.current[payload] ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref) : undefined;\n    }\n\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  }\n\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateSchemaOrResolver) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  var commonProps = {\n    triggerValidation: triggerValidation,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    register: useCallback(register, [defaultValuesRef.current, defaultValuesAtRenderRef.current]),\n    unregister: useCallback(unregister, []),\n    getValues: useCallback(getValues, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n  var control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener: removeFieldEventListener,\n    reRender: reRender\n  }, shouldValidateSchemaOrResolver ? {\n    validateSchemaIsValid: validateSchemaOrResolver\n  } : {}), {\n    mode: {\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit\n    },\n    errorsRef: errorsRef,\n    touchedFieldsRef: touchedFieldsRef,\n    fieldsRef: fieldsRef,\n    isWatchAllRef: isWatchAllRef,\n    watchFieldsRef: watchFieldsRef,\n    resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues: fieldArrayDefaultValues,\n    validFieldsRef: validFieldsRef,\n    dirtyFieldsRef: dirtyFieldsRef,\n    fieldsWithValidationRef: fieldsWithValidationRef,\n    fieldArrayNamesRef: fieldArrayNamesRef,\n    isDirtyRef: isDirtyRef,\n    readFormStateRef: readFormStateRef,\n    defaultValuesRef: defaultValuesRef\n  }), commonProps);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    handleSubmit: handleSubmit,\n    reset: useCallback(reset, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState: formState,\n      errors: errors\n    })\n  }, children);\n}\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar appendId = function appendId(value, keyName) {\n  return Object.assign(_defineProperty({}, keyName, generateId()), isObject(value) ? value : {\n    value: value\n  });\n};\n\nvar mapIds = function mapIds(data, keyName) {\n  return (isArray(data) ? data : []).map(function (value) {\n    return appendId(value, keyName);\n  });\n};\n\nvar getSortRemovedItems = function getSortRemovedItems(indexes, removeIndexes) {\n  var updatedIndexes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var notFoundIndexes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  var _iterator = _createForOfIteratorHelper(removeIndexes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var removeIndex = _step.value;\n\n      if (indexes.indexOf(removeIndex) < 0) {\n        notFoundIndexes.push(removeIndex);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(indexes.sort()),\n      _step2;\n\n  try {\n    var _loop2 = function _loop2() {\n      var index = _step2.value;\n\n      if (removeIndexes.indexOf(index) > -1) {\n        updatedIndexes.push(-1);\n        count++;\n      } else {\n        updatedIndexes.push(index - count - (notFoundIndexes.length ? notFoundIndexes.map(function (notFoundIndex) {\n          return notFoundIndex < index;\n        }).filter(Boolean).length : 0));\n      }\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return updatedIndexes;\n};\n\nvar removeAt = function removeAt(data, index) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(data.slice(index + 1)));\n};\n\nfunction removeAtIndexes(data, index) {\n  var k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  return isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return isArray(value) ? Array(value.length).fill(null) : null;\n};\n\nvar useFieldArray = function useFieldArray(_ref37) {\n  var control = _ref37.control,\n      name = _ref37.name,\n      _ref37$keyName = _ref37.keyName,\n      keyName = _ref37$keyName === void 0 ? 'id' : _ref37$keyName;\n  var methods = useFormContext();\n\n  var _ref38 = control || methods.control,\n      isWatchAllRef = _ref38.isWatchAllRef,\n      resetFieldArrayFunctionRef = _ref38.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref38.fieldArrayNamesRef,\n      reRender = _ref38.reRender,\n      fieldsRef = _ref38.fieldsRef,\n      getValues = _ref38.getValues,\n      defaultValuesRef = _ref38.defaultValuesRef,\n      removeFieldEventListener = _ref38.removeFieldEventListener,\n      errorsRef = _ref38.errorsRef,\n      dirtyFieldsRef = _ref38.dirtyFieldsRef,\n      isDirtyRef = _ref38.isDirtyRef,\n      touchedFieldsRef = _ref38.touchedFieldsRef,\n      readFormStateRef = _ref38.readFormStateRef,\n      watchFieldsRef = _ref38.watchFieldsRef,\n      validFieldsRef = _ref38.validFieldsRef,\n      fieldsWithValidationRef = _ref38.fieldsWithValidationRef,\n      fieldArrayDefaultValues = _ref38.fieldArrayDefaultValues,\n      validateSchemaIsValid = _ref38.validateSchemaIsValid;\n\n  var getDefaultValues = function getDefaultValues() {\n    return _toConsumableArray(get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, []));\n  };\n\n  var memoizedDefaultValues = useRef(getDefaultValues());\n\n  var _useState3 = useState(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setField = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDeleted = _useState6[0],\n      setIsDeleted = _useState6[1];\n\n  var allFields = useRef(fields);\n  var isNameKey = isKey(name);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  var appendValueWithKey = function appendValueWithKey(values) {\n    return values.map(function (value) {\n      return appendId(value, keyName);\n    });\n  };\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid(_defineProperty({}, name, fieldsValues));\n    }\n  };\n\n  var modifyDirtyFields = function modifyDirtyFields() {\n    var _ref39 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        shouldRender = _ref39.shouldRender,\n        isRemove = _ref39.isRemove,\n        isPrePend = _ref39.isPrePend,\n        index = _ref39.index,\n        _ref39$value = _ref39.value,\n        value = _ref39$value === void 0 ? {} : _ref39$value;\n\n    var render = shouldRender;\n    var values = isArray(value) ? value : [value];\n\n    if (readFormStateRef.current.dirty) {\n      var dirtyFieldIndexesAndValues = {};\n\n      if (isPrePend || isRemove) {\n        var _iterator3 = _createForOfIteratorHelper(_toConsumableArray(dirtyFieldsRef.current).sort()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dirtyField = _step3.value;\n\n            if (isMatchFieldArrayName(dirtyField, name)) {\n              var matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\n\n              if (matchedIndexes) {\n                var matchIndex = +matchedIndexes[matchedIndexes.length - 1];\n\n                if (dirtyFieldIndexesAndValues[matchIndex]) {\n                  dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\n                } else {\n                  dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\n                }\n              }\n\n              dirtyFieldsRef.current[\"delete\"](dirtyField);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (!isUndefined(index) || isPrePend) {\n        var updatedDirtyFieldIndexes = isUndefined(index) ? [] : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map(function (i) {\n          return +i;\n        }), isArray(index) ? index : [index]);\n        Object.values(dirtyFieldIndexesAndValues).forEach(function (values, index) {\n          var updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\n\n          if (updateIndex > -1) {\n            var _iterator4 = _createForOfIteratorHelper(values),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _value = _step4.value;\n\n                var _matchedIndexes = _value.match(REGEX_ARRAY_FIELD_INDEX);\n\n                if (_matchedIndexes) {\n                  dirtyFieldsRef.current.add(_value.replace(/[\\d+]([^[\\d+]+)$/, \"\".concat(isPrePend ? +_matchedIndexes[_matchedIndexes.length - 1] + values.length : updateIndex, \"$1\")));\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        });\n      }\n\n      if (!isRemove) {\n        values.forEach(function (fieldValue, index) {\n          return Object.keys(fieldValue).forEach(function (key) {\n            return dirtyFieldsRef.current.add(\"\".concat(name, \"[\").concat(isPrePend ? index : allFields.current.length + index, \"].\").concat(key));\n          });\n        });\n        isDirtyRef.current = true;\n      }\n\n      render = true;\n    }\n\n    if (render && !isWatchAllRef.current) {\n      reRender();\n    }\n  };\n\n  var resetFields = function resetFields(flagOrFields) {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\n    }\n\n    for (var key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  var mapCurrentFieldsValueWithState = function mapCurrentFieldsValueWithState() {\n    var currentFieldsValue = get(getValues({\n      nest: true\n    }), name);\n\n    if (isArray(currentFieldsValue)) {\n      for (var i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  var append = function append(value) {\n    setFieldAndValidState([].concat(_toConsumableArray(allFields.current), _toConsumableArray(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])));\n    modifyDirtyFields({\n      value: value\n    });\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldRender = false;\n    resetFields();\n    setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\n      shouldRender = true;\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isPrePend: true,\n      value: value\n    });\n  };\n\n  var remove = function remove(index) {\n    var shouldRender = false;\n    var isIndexUndefined = isUndefined(index);\n\n    if (!isIndexUndefined) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      var fieldIndex = -1;\n      var isFound = false;\n\n      var _isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        var isLast = fieldIndex === fields.length - 1;\n        var isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || _isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (var key in fields[fieldIndex]) {\n          var currentFieldName = \"\".concat(name, \"[\").concat(fieldIndex, \"].\").concat(key);\n\n          if (isCurrentIndex || isLast || _isIndexUndefined) {\n            validFieldsRef.current[\"delete\"](currentFieldName);\n            fieldsWithValidationRef.current[\"delete\"](currentFieldName);\n          } else {\n            var previousFieldName = \"\".concat(name, \"[\").concat(fieldIndex - 1, \"].\").concat(key);\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isRemove: true,\n      index: index\n    });\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    mapCurrentFieldsValueWithState();\n    resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  var swap = function swap(indexA, indexB) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  var move = function move(from, to) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  var reset = function reset() {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(function () {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect(function () {\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      var _iterator5 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var watchField = _step5.value;\n\n          if (watchField.startsWith(name)) {\n            reRender();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\n  useEffect(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames[\"delete\"](name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nvar getInputValue = function getInputValue(event, isCheckboxInput) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nvar Controller = function Controller(_a) {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      onFocus = _a.onFocus,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  var methods = useFormContext();\n\n  var _ref40 = control || methods.control,\n      defaultValuesRef = _ref40.defaultValuesRef,\n      setValue = _ref40.setValue,\n      register = _ref40.register,\n      unregister = _ref40.unregister,\n      errorsRef = _ref40.errorsRef,\n      removeFieldEventListener = _ref40.removeFieldEventListener,\n      triggerValidation = _ref40.triggerValidation,\n      _ref40$mode = _ref40.mode,\n      isOnSubmit = _ref40$mode.isOnSubmit,\n      isOnBlur = _ref40$mode.isOnBlur,\n      isOnChange = _ref40$mode.isOnChange,\n      _ref40$reValidateMode = _ref40.reValidateMode,\n      isReValidateOnBlur = _ref40$reValidateMode.isReValidateOnBlur,\n      isReValidateOnSubmit = _ref40$reValidateMode.isReValidateOnSubmit,\n      isSubmitted = _ref40.formState.isSubmitted,\n      fieldsRef = _ref40.fieldsRef,\n      fieldArrayNamesRef = _ref40.fieldArrayNamesRef;\n\n  var _useState7 = useState(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue),\n      _useState8 = _slicedToArray(_useState7, 2),\n      value = _useState8[0],\n      setInputStateValue = _useState8[1];\n\n  var valueRef = useRef(value);\n  var isCheckboxInput = isBoolean(value);\n  var shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  var rulesRef = useRef(rules);\n  var isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  rulesRef.current = rules;\n\n  var shouldValidate = function shouldValidate() {\n    return !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit,\n      isSubmitted: isSubmitted\n    });\n  };\n\n  var commonTask = function commonTask(event) {\n    var data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  var eventWrapper = function eventWrapper(event) {\n    return function () {\n      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n        arg[_key] = arguments[_key];\n      }\n\n      return setValue(name, commonTask(event(arg)), shouldValidate());\n    };\n  };\n\n  var handleChange = function handleChange(event) {\n    var data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  var registerField = useCallback(function () {\n    if (!isNotFieldArray && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name: name,\n      focus: onFocus\n    }, VALUE, {\n      set: function set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n      get: function get() {\n        return valueRef.current;\n      }\n    }), rulesRef.current);\n  }, [isNotFieldArray, fieldsRef, rulesRef, name, onFocus, register, removeFieldEventListener]);\n  useEffect(function () {\n    return function () {\n      return unregister(name);\n    };\n  }, [unregister, name]);\n  useEffect(function () {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!fieldsRef.current[name]) {\n      registerField();\n\n      if (isNotFieldArray) {\n        setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n      }\n    }\n  });\n  var props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name: name\n  }, rest), onChange ? _defineProperty({}, onChangeName, eventWrapper(onChange)) : _defineProperty({}, onChangeName, handleChange)), onBlur || shouldReValidateOnBlur ? _defineProperty({}, onBlurName, function () {\n    if (onBlur) {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      onBlur(args);\n    }\n\n    if (shouldReValidateOnBlur) {\n      triggerValidation(name);\n    }\n  }) : {}), _defineProperty({}, valueName || (isCheckboxInput ? 'checked' : VALUE), value));\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nvar ErrorMessage = function ErrorMessage(_a) {\n  var InnerComponent = _a.as,\n      errors = _a.errors,\n      name = _a.name,\n      message = _a.message,\n      children = _a.children,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  var methods = useFormContext();\n  var error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  var messageFromRegister = error.message,\n      types = error.types;\n  var props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","import React, { useState } from \"react\";\nimport useForm from \"react-hook-form\";\n\nconst FAKE_GATEWAY_URL = \"https://jsonplaceholder.typicode.com/posts\";\nconst required = \"This field is required\";\n\nexport default () => {\n  const [submitted, setSubmitted] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    setError,\n    errors,\n    reset,\n    formState: { isSubmitting }\n  } = useForm();\n\n  const onSubmit = async data => {\n    try {\n      await fetch(FAKE_GATEWAY_URL, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      setSubmitted(true);\n      reset();\n    } catch (error) {\n      setError(\n        \"submit\",\n        \"submitError\",\n        `Oops! There seems to be an issue! ${error.message}`\n      );\n    }\n  };\n\n  const showSubmitError = msg => <p className=\"msg-error\">{msg}</p>;\n\n  const showThankYou = (\n    <div className=\"msg-confirm\">\n      <p>Awesome! Your message was sent.</p>\n      <button type=\"button\" onClick={() => setSubmitted(false)}>\n        Send another message?\n      </button>\n    </div>\n  );\n\n  const showForm = (\n    <form onSubmit={handleSubmit(onSubmit)} method=\"post\">\n      <label htmlFor=\"name\">\n        <h5>Name</h5>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          placeholder=\"Your name\"\n          ref={register({ required })}\n          disabled={isSubmitting}\n        />\n        {errors.name && <div className=\"msg-error\">{errors.name.message}</div>}\n      </label>\n\n      <label htmlFor=\"email\">\n        <h5>Email</h5>\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"email\"\n          placeholder=\"your@email.address\"\n          ref={register({ required })}\n          disabled={isSubmitting}\n        />\n        {errors.email && (\n          <div className=\"msg-error\">{errors.email.message}</div>\n        )}\n      </label>\n\n      <label htmlFor=\"question\">\n        <h5>Message</h5>\n        <textarea\n          ref={register({ required })}\n          name=\"question\"\n          id=\"question\"\n          rows=\"3\"\n          placeholder=\"Your message\"\n          disabled={isSubmitting}\n        />\n        {errors.question && (\n          <div className=\"msg-error\">{errors.question.message}</div>\n        )}\n      </label>\n\n      <div className=\"submit-wrapper\">\n        <button type=\"submit\" disabled={isSubmitting}>\n          Send\n        </button>\n      </div>\n    </form>\n  );\n\n  return (\n    <div className=\"page contact-page\">\n      <div className=\"text-side\">\n        <h2>Contact me</h2>\n        {errors && errors.submit && showSubmitError(errors.submit.message)}\n      </div>\n      <div className=\"form-side\">{submitted ? showThankYou : showForm}</div>\n    </div>\n  );\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","require(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","module.exports = require(\"regenerator-runtime\");\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"sourceRoot":""}